{"version":3,"sources":["queries.js","components/AuthorForm.js","components/Authors.js","components/Books.js","components/NewBookForm.js","components/Login.js","App.js","index.js"],"names":["gql","USER_LOGIN","ALL_BOOKS","FIND_BOOK","CREATE_BOOK","ALL_AUTHORS","EDIT_AUTHOR","AuthorForm","props","useState","name","setName","setBornTo","setBornYear","useMutation","onError","error","console","log","Error","update","store","response","dataInStore","readQuery","query","writeQuery","data","allAuthors","map","author","editAuthor","changeBornYear","authors","onSubmit","event","preventDefault","variables","value","onChange","target","type","placeholder","parseInt","className","Authors","result","useQuery","show","loading","a","born","bookCount","Books","useLazyQuery","getBook","bookResult","book","setBook","showBook","bookTitle","bookToSearch","useEffect","findBook","title","onClick","books","allBooks","published","NewBookForm","setTitle","setAuthor","setPublished","genre","setGenre","genres","setGenres","refetchQueries","createNewBook","submit","style","margin","join","concat","Login","setError","setToken","username","setUsername","password","graphQLErrors","message","userLogin","token","login","localStorage","setItem","e","defaultValue","Notify","errorMessage","color","App","page","setPage","setErrorMessage","client","useApolloClient","savedToken","getItem","notify","setTimeout","clear","resetStore","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.421c1c69.chunk.js","sourcesContent":["import { gql  } from '@apollo/client'\n\n\nexport const CREATE_USER = gql`\nmutation createNewUser($username: String!,$favoriteGenre: String!) {\n  createUser(username: $username, favoriteGenre: $favoriteGenre) {\n    username,\n    favoriteGenre\n  }\n}\n`\nexport const USER_LOGIN = gql`\nmutation userLogin($username: String!, $password: String!) {\n  login(username: $username,password: $password) {\n    value\n  }\n}\n`\n\nexport const ALL_BOOKS = gql`\nquery {\n  allBooks  {\n    title\n    author{\n      name\n    } \n    published\n  }\n}\n`\nexport const FIND_BOOK = gql`\nquery findBookByTitle($bookToSearch: String!) {\n  findBook(title: $bookToSearch) {\n    title,\n    author{\n      name\n    },\n    published\n  }\n}\n`\n\nexport const CREATE_BOOK = gql`\nmutation createNewBook($title: String!, $author: String!, $published: Int!, $genres:[String]!) {\n  addBook(\n    title: $title,\n    author: $author,\n    published: $published,\n    genres: $genres\n  ) {\n    title\n  }\n}\n`\nexport const ALL_AUTHORS = gql`\nquery {\n  allAuthors  {\n    name,\n    born,\n    bookCount\n  }\n}\n`\n\nexport const EDIT_AUTHOR = gql`\n  mutation editAuthor($name: String!, $setBornTo: Int!) {\n    editAuthor(name: $name, setBornTo: $setBornTo)  {\n      name\n      born\n      bookCount\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\n\nimport { EDIT_AUTHOR, ALL_AUTHORS } from '../queries'\n\nconst AuthorForm = (props) => {\n  const [name, setName] = useState('')\n  const [setBornTo, setBornYear] = useState('')\n\n  const [ changeBornYear ] = useMutation(EDIT_AUTHOR, {\n    onError: (error) => {\n        console.log(error.Error)\n      },\n      update: (store, response) => {\n        const dataInStore = store.readQuery({ query: ALL_AUTHORS })\n        store.writeQuery({\n          query: ALL_AUTHORS,\n          data: {\n            ...dataInStore,\n            allAuthors: dataInStore.allAuthors.map(author=>author.name===response.data.editAuthor.name ? response.data.editAuthor : author)\n          }\n        })\n      }\n  })\n  const submit = (event) => {\n    event.preventDefault()\n    console.log(name)\n    changeBornYear({ variables: { name, setBornTo } })\n\n    setName('')\n    setBornYear('')\n  }\n\n  const authors = props.authors\n  //setName(authors[0].name)\n  return (\n    <div>\n      <h2>Set BirthYear</h2>\n\n      <form onSubmit={submit}>\n        <div>Select Author</div>\n        <select\n        value={name}\n         onChange={({target})=>setName(target.value)}>\n             <option value=\"none\">none</option>\n            {authors.map(author=>(\n                <option key ={author.name} value={author.name}>{author.name}</option>\n            ))}\n          </select>\n        <div>\n          Born Year<input\n          type=\"number\"\n            value={setBornTo}\n            placeholder=\"i.e: 1994\"\n            onChange={({ target }) => setBornYear(parseInt(target.value))}\n          />\n        </div>\n        <button className=\"blueButton\" type='submit'>update author</button>\n      </form>\n    </div>\n  )\n}\n\nexport default AuthorForm","import React from 'react'\nimport { useQuery } from '@apollo/client';\nimport { ALL_AUTHORS } from '../queries'\nimport AuthorForm from './AuthorForm';\n\nconst Authors = (props) => {\n    const result = useQuery(ALL_AUTHORS)\n\n  if (!props.show) {\n    return null\n  }\n  if (result.loading)  {\n    return <div>loading...</div>\n  }\n\n  const authors = result.data.allAuthors\n\n  return (\n    <div>\n      <h2>Authors</h2>\n      <table>\n        <tbody>\n          <tr className=\"table-header\">\n            <th>Name</th>\n            <th>\n              Born\n            </th>\n            <th>\n              Books\n            </th>\n          </tr>\n          {authors.map(a =>\n            <tr key={a.name}>\n              <td>{a.name}</td>\n              <td>{a.born}</td>\n              <td>{a.bookCount}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    <AuthorForm authors={authors}/>\n    </div>\n  )\n}\n\nexport default Authors","import {useState, useEffect} from 'react'\nimport { useLazyQuery, useQuery } from '@apollo/client';\nimport { ALL_BOOKS, FIND_BOOK } from '../queries'\n\n\nconst Books = (props) => {\n  const result = useQuery(ALL_BOOKS)\n  const [getBook, bookResult] = useLazyQuery(FIND_BOOK) \n  const [book, setBook] = useState(null)\n\n  const showBook = (bookTitle) => {\n    getBook({ variables: { bookToSearch: bookTitle } })\n  }\n\n  useEffect(() => {\n    if (bookResult.data) {\n      setBook(bookResult.data.findBook)\n    }\n  }, [bookResult])\n\n  if (book) {\n    return(\n      <div>\n        <h2>{book.title}</h2>\n        <div>{book.author}</div>\n        <button onClick={() => setBook(null)}>close</button>\n      </div>\n    )\n  }\n  if (!props.show) {\n    return null\n  }\n\n  if (result.loading)  {\n    return <div>loading...</div>\n  }\n  \n  const books = result.data.allBooks\n  return (\n    <div>\n      <h2>Books</h2>\n\n      <table>\n        <tbody>\n          <tr className=\"table-header\">\n            <th>\n              Book Title\n            </th>\n            <th>\n              Author\n            </th>\n            <th>\n              Published\n            </th>\n          </tr>\n          {books.map(a =>\n            <tr key={a.title} onClick={showBook}>\n              <td>{a.title}</td>\n              <td>{a.author.name}</td>\n              <td>{a.published}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Books","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { CREATE_BOOK,ALL_BOOKS, ALL_AUTHORS  } from '../queries'\n\nconst NewBookForm = (props) => {\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const [published, setPublished] = useState('')\n  const [genre, setGenre] = useState('')\n  const [genres, setGenres] = useState([])\n\n\n  const [ createNewBook ] = useMutation(CREATE_BOOK, {\n    refetchQueries: [ { query: ALL_BOOKS },{ query: ALL_AUTHORS } ],\n    onError: (error) => {\n        console.log(error.Error)\n      }\n    })\n\n  if (!props.show) {\n    return null\n  }\n\n  const submit = async (event) => {\n    event.preventDefault()\n    \n    console.log('add book...')\n    createNewBook({  variables: {title, author,published, genres}})\n\n    setTitle('')\n    setPublished('')\n    setAuthor('')\n    setGenres([])\n    setGenre('')\n  }\n\n  const addGenre = () => {\n    setGenres(genres.concat(genre))\n    setGenre('')\n  }\n\n  return (\n    <div>\n      <h2>Create New Book</h2>\n      <form onSubmit={submit}>\n        <div>\n          Title :\n          <input\n            value={title}\n            placeholder=\"Book Title\"\n            onChange={({ target }) => setTitle(target.value)}\n          />\n        </div>\n        <div>\n          Author :\n          <input\n            value={author}\n            placeholder=\"Book Author\"\n            onChange={({ target }) => setAuthor(target.value)}\n          />\n        </div>\n        <div>\n          Published :\n          <input\n            type='number'\n            value={published}\n            placeholder=\"Published Year\"\n            onChange={({ target }) => setPublished(parseInt(target.value))}\n          />\n        </div>\n        <div style={{margin:10}}>\n          Genres: \n          <p>{genres.join(' ')}</p>\n        </div>\n        <div>\n          <input\n            value={genre}\n            placeholder=\"Book genre\"\n            onChange={({ target }) => setGenre(target.value)}\n          />\n          <button className=\"blueButton\" onClick={addGenre} type=\"button\">add genre</button>\n        </div>\n        \n        \n        <button className=\"greenButton\" type='submit'>create book</button>\n      </form>\n    </div>\n  )\n}\n\nexport default NewBookForm","import { USER_LOGIN } from '../queries'\nimport { useMutation } from '@apollo/client'\nimport { useState, useEffect } from 'react';\n\nconst Login = ({ setError, setToken }) => {\n\n    const [username,setUsername] = useState('')\n    const password = \"secred\"\n\n    const [userLogin,result] = useMutation(USER_LOGIN,{\n        onError: (error) => {\n            setError(error.graphQLErrors[0].message)\n          } \n    })\n\n    useEffect(()=>{\n        if ( result.data ) {\n            const token = result.data.login.value\n            setToken(token)\n            localStorage.setItem('libraryApp-userToken', token)\n          }\n    },[result.data])\n\n    const login = (e) =>{\n        e.preventDefault()\n        userLogin({variables:{ username, password }}) \n    }\n    return(\n        <div>\n            <form onSubmit={login}>\n                <div>\n                    <label>Username:</label>\n                    <input name=\"username\" placeholder=\"username\"\n                    onChange={({target})=>setUsername(target.value)}></input>\n                </div>\n\n                <div>\n                <label>Password:</label>\n                    <input type=\"password\" name=\"password\" defaultValue={password} placeholder=\"password\"></input>\n                </div>\n                <button className=\"greenButton\">login</button>\n            </form>\n            <div>\n                <h3>Test with</h3>\n                \n                <p><strong>username: </strong>shivachit1</p>\n                <p><strong>password: </strong>secred</p>\n                \n            </div>\n        </div>\n    )\n}\n\nexport default Login","import React, {useState,useEffect} from 'react'\nimport { useApolloClient } from '@apollo/client'\nimport Authors from './components/Authors'\nimport Books from './components/Books'\nimport NewBookForm from './components/NewBookForm'\nimport Login from './components/Login'\n\nconst App = () => {\n  const [token, setToken] = useState(null)\n  const [page, setPage] = useState('authors')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const client = useApolloClient()\n  \n  useEffect(()=>{\n    const savedToken = localStorage.getItem('libraryApp-userToken')\n    if(savedToken){\n      setToken(savedToken)\n    }\n  },[])\n\n  const notify = (message) => {\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 10000)\n  }\n\n  const logOut = () => {\n    setToken('')\n    localStorage.clear()\n    client.resetStore()\n    \n  }\n\n  if (!token) {\n    return (\n      <div className=\"App\">\n        <h2>Library-App</h2>\n        <Notify errorMessage={errorMessage} />\n        <h2 className=\"header\">Login</h2>\n        <Login\n          setToken={setToken}\n          setError={notify}\n        />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <h2 className=\"header\">Library-App</h2>\n      <p><strong>Username:</strong> shivachit1</p>\n      <button className=\"redButton\" onClick={() => logOut()}>Logout</button>\n      <div>\n        <button className=\"linkButton\" onClick={() => setPage('authors')}>Authors</button>\n        <button className=\"linkButton\" onClick={() => setPage('books')}>Books</button>\n        <button className=\"linkButton\" onClick={() => setPage('add')}>Add book</button>\n      </div>\n      <Notify errorMessage={errorMessage} />\n      <NewBookForm setError={notify}/>\n      <Authors\n        show={page === 'authors'}\n      />\n\n      <Books\n        show={page === 'books'}\n      />\n\n      <NewBookForm\n        show={page === 'add'}\n      />\n    </div>\n  )\n}\n\n\nconst Notify = ({errorMessage}) => {\n  if ( !errorMessage ) {\n    return null\n  }\n  return (\n    <div style={{color: 'red'}}>\n    {errorMessage}\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './App.css'\nimport { setContext } from 'apollo-link-context'\nimport { ApolloClient,ApolloProvider, HttpLink, InMemoryCache } from '@apollo/client'\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('libraryApp-userToken')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\n// for production \nconst httpLink = new HttpLink({ uri: '/graphql' })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>, \ndocument.getElementById('root'))\n"],"sourceRoot":""}